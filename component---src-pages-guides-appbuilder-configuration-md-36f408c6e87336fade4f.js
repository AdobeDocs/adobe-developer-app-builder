(self.webpackChunkproject_firefly=self.webpackChunkproject_firefly||[]).push([[5795],{60665:function(e,n,i){"use strict";i.r(n),i.d(n,{_frontmatter:function(){return m},default:function(){return r}});var t=i(22122),o=i(19756),a=(i(15007),i(64983)),d=i(99536),l=["components"],m={},p={_frontmatter:m},s=d.Z;function r(e){var n=e.components,i=(0,o.Z)(e,l);return(0,a.mdx)(s,(0,t.Z)({},p,i,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"app-builder-configuration-files"},"App Builder Configuration Files"),(0,a.mdx)("h2",{id:"overview"},"Overview"),(0,a.mdx)("p",null,"An app has three configuration files, ",(0,a.mdx)("strong",{parentName:"p"},"defined in the root of the project folder"),":"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"app.config.yaml")," is the main configuration file, defining the application's behavior and implementation."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},".env")," is used to store secrets and environment variables available during build time."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},".aio")," is populated by the ",(0,a.mdx)("inlineCode",{parentName:"li"},"aio")," CLI to store the current Developer Console Workspace details.")),(0,a.mdx)("p",null,"Note: ",(0,a.mdx)("inlineCode",{parentName:"p"},".env")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},".aio")," files ",(0,a.mdx)("strong",{parentName:"p"},"should not be committed to version control"),"."),(0,a.mdx)("h2",{id:"appconfigyaml"},(0,a.mdx)("inlineCode",{parentName:"h2"},"app.config.yaml")),(0,a.mdx)("h3",{id:"tldr-give-me-a-full-example"},"Tl;dr: give me a full example:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"# standalone application config\napplication:\n  hostname: 'customhost'\n  runtimeManifest:\n    packages:\n      application-pkg:\n        actions:\n          count-apples:\n            function: actions/count-apples/index.js\n            web: 'yes'\n            annotations:\n              require-adobe-auth: true\n  hooks:\n    post-app-build: 'echo hook'\n\n# extension points config\nextensions:\n  dx/excshell/1:\n    # $include directive stores config in a separate file\n    $include: ./dx-excshell-1/ext.config.yaml\n  dx/asset-compute/worker/1:\n    operations:\n      workerProcess:\n        - type: action\n          impl: dx-asset-compute-worker-1/myworker\n    runtimeManifest:\n      packages:\n        dx-asset-compute-worker-1:\n          actions:\n            myworker:\n              function: actions/worker/index.js\n              web: 'yes'\n")),(0,a.mdx)("h3",{id:"standalone-application-and-extensions"},"Standalone application and extensions"),(0,a.mdx)("p",null,"The ",(0,a.mdx)("inlineCode",{parentName:"p"},"app.config.yaml")," file can contain two top level fields: ",(0,a.mdx)("inlineCode",{parentName:"p"},"application")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"extensions"),".\nOnly one is required."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"# app.config.yaml\n\napplication:\n  <common-config>\nextensions:\n  <extension-type>:\n    <extension-definition>\n    <common-config>\n")),(0,a.mdx)("p",null,"A project can implement a standalone application and N extensions. "),(0,a.mdx)("h3",{id:"common-configuration"},"Common configuration"),(0,a.mdx)("p",null,"Extensions and the standalone application behave in a similar way.\nBoth can contain a UI and actions and both support a common configuration.\nThe common configuration contains following fields:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"# <common-config>\n\nruntimeManifest:\n  <runtime-manifest>\nhooks:\n  <app-hooks>\nactions: <path to action folder>\nweb: <path to web folder>\nunitTest: <path to unit test folder>\ne2eTest: <path to e2e test folder>\ndist: <path to build folder>\nhtmlCacheDuration: <cache duration for UI html files, default: 60s>\njsCacheDuration: <cache duration for UI JS files, default: about a week>\ncssCacheDuration: <cache duration for UI JS files, default: about a week>\nimageCacheDuration: <cache duration for UI JS files, default: about a week>\ntvmurl: <alternative tvm url used to upload the UI>\nawsaccesskeyid: <upload UI to own s3, provide credentials>\nawssecretaccesskey: <upload UI to own s3, provide credentials>\ns3bucket: <upload UI to own s3, provide credentials>\nhostname: <alternative hostname for the UI>\n")),(0,a.mdx)("h4",{id:"runtime-manifest"},"Runtime Manifest"),(0,a.mdx)("p",null,"The ",(0,a.mdx)("inlineCode",{parentName:"p"},"runtimeManifest")," field holds the backend configuration deployed into Adobe I/O Runtime.\nThe full spec can be found ",(0,a.mdx)("a",{parentName:"p",href:"https://github.com/apache/openwhisk-wskdeploy/tree/master/specification/html"},"here"),"\nHere is an example to get started:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"runtimeManifest\n   packages:\n     myapp:\n       license: Apache-2.0\n       actions:\n         generic:\n           # path relative to the configuration file\n           function: src/myapp/actions/generic/index.js\n           web: 'yes'\n           annotations:\n            require-adobe-auth: true\n         target:\n           function: src/myapp/actions/target/index.js\n           web: 'yes'\n           limits:\n             timeout: 60\n             memory: 512\n")),(0,a.mdx)("h4",{id:"hooks-to-customize-the-tooling"},"Hooks to customize the tooling"),(0,a.mdx)("p",null,"Hooks can be used to customize ",(0,a.mdx)("inlineCode",{parentName:"p"},"aio app")," commands. Hooks are documented ",(0,a.mdx)("a",{parentName:"p",href:"https://github.com/AdobeDocs/project-firefly/blob/main/src/pages/guides/app-hooks.md"},"here"),"."),(0,a.mdx)("h3",{id:"extension-specific-configuration"},"Extension specific configuration"),(0,a.mdx)("h4",{id:"extension-types"},"Extension types"),(0,a.mdx)("p",null,"The ",(0,a.mdx)("inlineCode",{parentName:"p"},"<extension-type>")," indicates which product the extension is extending, currently we support the following product extensions:"),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("inlineCode",{parentName:"li"},"dx/excshell/1")," to implement an Experience Cloud Shell single page application."),(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("inlineCode",{parentName:"li"},"dx/asset-compute/worker/1")," to implement an AEM Asset Compute worker.")),(0,a.mdx)("h4",{id:"dxexcshell1-definition"},(0,a.mdx)("inlineCode",{parentName:"h4"},"dx/excshell/1")," definition"),(0,a.mdx)("p",null,"The Experience Cloud Shell extension supports a ",(0,a.mdx)("inlineCode",{parentName:"p"},"view")," operation that points to the entry html file of the SPA.\nIn the following example the ",(0,a.mdx)("inlineCode",{parentName:"p"},"impl")," field points to an ",(0,a.mdx)("inlineCode",{parentName:"p"},"index.html")," file stored in the ",(0,a.mdx)("inlineCode",{parentName:"p"},"web/")," folder of the extension."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"extensions\n  dx/excshell/1:\n    operations:\n      view:\n        - type: web\n          impl: index.html\n     web-src: web/\n")),(0,a.mdx)("h4",{id:"dxasset-computeworker1-definition"},(0,a.mdx)("inlineCode",{parentName:"h4"},"dx/asset-compute/worker/1")," definition"),(0,a.mdx)("p",null,"The AEM Asset Compute worker extension supports a ",(0,a.mdx)("inlineCode",{parentName:"p"},"workerProcess")," operation that points to the backend Adobe I/O Runtime action implementing the worker logic.\nIn the following example the ",(0,a.mdx)("inlineCode",{parentName:"p"},"impl")," field points to the  ",(0,a.mdx)("inlineCode",{parentName:"p"},"dx-asset-compute-worker-1/worker")," action defined in the ",(0,a.mdx)("inlineCode",{parentName:"p"},"runtimeManifest"),"."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"extensions\n  dx/asset-compute/worker/1:\n    operations:\n      workerProcess:\n        - type: action\n          impl: dx-asset-compute-worker-1/myworker\n    runtimeManifest:\n      packages:\n        dx-asset-compute-worker-1:\n          actions:\n            myworker:\n              function: actions/worker/index.js\n              web: 'yes'\n")),(0,a.mdx)("h3",{id:"the-include-directive"},"The ",(0,a.mdx)("inlineCode",{parentName:"h3"},"$include")," directive"),(0,a.mdx)("p",null,"The ",(0,a.mdx)("inlineCode",{parentName:"p"},"$include")," directive allows to defer any part of the ",(0,a.mdx)("inlineCode",{parentName:"p"},"app.config.yaml")," to another file.\nIn the following example, the ",(0,a.mdx)("inlineCode",{parentName:"p"},"dx/excshell/1")," configuration is stored in another ",(0,a.mdx)("inlineCode",{parentName:"p"},"./src/dx-excshell-1/ext.config.yaml")," file."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"extensions:\n  dx/excshell/1:\n    $include: ./src/dx-excshell-1/ext.config.yaml\n")),(0,a.mdx)("p",null,"Configuration paths defined in ",(0,a.mdx)("inlineCode",{parentName:"p"},"./src/dx-excshell-1/ext.config.yaml")," must be relative to that file."),(0,a.mdx)("h2",{id:"env"},(0,a.mdx)("inlineCode",{parentName:"h2"},".env")),(0,a.mdx)("p",null,"The ",(0,a.mdx)("inlineCode",{parentName:"p"},".env")," file is used to store:"),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},"secrets to be injected into I/O Runtime Actions."),(0,a.mdx)("li",{parentName:"ol"},"environment variables available to ",(0,a.mdx)("inlineCode",{parentName:"li"},"hooks"),"."),(0,a.mdx)("li",{parentName:"ol"},"auto generated secrets used by the ",(0,a.mdx)("inlineCode",{parentName:"li"},"aio")," CLI, prefixed by ",(0,a.mdx)("inlineCode",{parentName:"li"},"AIO_"),", those should not be edited.")),(0,a.mdx)("h2",{id:"aio"},(0,a.mdx)("inlineCode",{parentName:"h2"},".aio")),(0,a.mdx)("p",null,"The ",(0,a.mdx)("inlineCode",{parentName:"p"},".aio")," file is auto generated and contains Developer Console specific configuration.\nThis file is updated via the ",(0,a.mdx)("inlineCode",{parentName:"p"},"aio app use")," command and should not be edited manually."),(0,a.mdx)("h2",{id:"legacy-configuration-system"},"Legacy configuration system"),(0,a.mdx)("p",null,"Apps initialized using a ",(0,a.mdx)("inlineCode",{parentName:"p"},"@adobe/aio-cli")," CLI version prior to 8.x use a legacy configuration system that we still support in newer CLI versions.\nThose apps do not support extensions, and only get deployed as standalone applications."),(0,a.mdx)("p",null,"The legacy configuration system does not have an ",(0,a.mdx)("inlineCode",{parentName:"p"},"app.config.yaml")," and instead uses:"),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("inlineCode",{parentName:"li"},".aio")," to store common configuration bits, but hooks and Runtime Manifest, such as ",(0,a.mdx)("inlineCode",{parentName:"li"},"actions")," path."),(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("inlineCode",{parentName:"li"},"manifest.yaml")," to stores the Runtime Manifest."),(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("inlineCode",{parentName:"li"},"package.json")," to store hooks."),(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("inlineCode",{parentName:"li"},".env")," behaves the same.")))}r.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-guides-appbuilder-configuration-md-36f408c6e87336fade4f.js.map