{"version":3,"file":"component---src-pages-resources-journaling-events-lesson-1-md-2c48bff053703a6c6905.js","mappings":"kTAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,MACE,GAAM,uDACJ,yDACJA,EAAAA,EAAAA,KAAA,SAAI,iDACJA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAM,wDACrBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAM,wCACrBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAM,gBACrBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAM,sCAEvBH,EAAAA,EAAAA,KAAA,MACE,GAAM,uDACJ,wDACJA,EAAAA,EAAAA,KAAA,SAAI,yUAEJA,EAAAA,EAAAA,KAAA,SAAI,0FACNA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,8BACN,QAAY,+BACKH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,sBAAmC,2BAA0BH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,iBAA8B,2BAC1KH,EAAAA,EAAAA,KAAA,MACE,GAAM,sCACJ,uCACJA,EAAAA,EAAAA,KAAA,SAAI,+HACJA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,iBACX,mDAENH,EAAAA,EAAAA,KAAA,SAAI,iDACNA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,8BACN,UACNH,EAAAA,EAAAA,KAAA,MACE,GAAM,yCACJ,0CACJA,EAAAA,EAAAA,KAAA,SAAI,2CAA0CA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACxD,KAAQ,4BACN,QAAY,yFAAwFH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACpH,KAAQ,kGACN,UACNH,EAAAA,EAAAA,KAAA,MACE,GAAM,oCACJ,qCACJA,EAAAA,EAAAA,KAAA,SAAI,oFAAmFA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACjG,KAAQ,yBACN,sCACNH,EAAAA,EAAAA,KAAA,SAAI,SAAQA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,mBAAgC,qCACxEH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,iBACX,qyCA4CNH,EAAAA,EAAAA,KAAA,SAAI,mDAAkDA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,kBAA+B,kEAAiEH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,8CAA2D,gDAA+CH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,4BAAyC,SAAQH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,+BACjaH,EAAAA,EAAAA,KAAA,SAAI,sKAGR,CAEAN,EAAWU,gBAAiB,C","sources":["webpack://adobe-developer-app-builder/./src/pages/resources/journaling-events/lesson1.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/app-builder/app-builder/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"lesson-1-create-an-event-provider-using-app-builder\"\n    }}>{`Lesson 1: Create an Event Provider using App Builder`}</h1>\n    <p>{`In this lesson, we will do the follow steps:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Create an event provider using App Builder template`}</li>\n      <li parentName=\"ul\">{`Register the App as event provider `}</li>\n      <li parentName=\"ul\">{`Fire Events`}</li>\n      <li parentName=\"ul\">{`Scheduling cron jobs with alarms`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"create-an-event-provider-using-app-builder-template\"\n    }}>{`Create an event provider using App Builder template`}</h2>\n    <p>{`In this codelab, to provide an end to end solution, we need to have an event provider generating tons of events sending to journaling API, and the events provider need to be configurable to send x events/min to help user to test. so we choose to use OpenWhisk Alarms Package in App Builder application to create\ncron jobs. `}</p>\n    <p>{`First, let's create a new App Builder App from template by follow the below codelab:\n`}<a parentName=\"p\" {...{\n        \"href\": \"../event-driven/lesson1.md\"\n      }}>{`here`}</a>{`\nplease make sure you add `}<inlineCode parentName=\"p\">{`I/O management API`}</inlineCode>{` in console and choose `}<inlineCode parentName=\"p\">{`publish-event`}</inlineCode>{` in the cli template. `}</p>\n    <h2 {...{\n      \"id\": \"register-the-app-as-event-provider\"\n    }}>{`Register the App as Event Provider`}</h2>\n    <p>{`Now we use cli to register the app as event provider, we need to install the Adobe I/O event cli plugin, simply run below:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install -g @adobe/aio-cli-plugin-events\n`}</code></pre>\n    <p>{`and then follow below codelab step by step:\n`}<a parentName=\"p\" {...{\n        \"href\": \"../event-driven/lesson2.md\"\n      }}>{`here`}</a></p>\n    <h2 {...{\n      \"id\": \"fire-events-and-set-up-consume-events\"\n    }}>{`Fire Events and set up consume Events`}</h2>\n    <p>{`Now we can set up fire event by follow `}<a parentName=\"p\" {...{\n        \"href\": \"../event-driven/index.md\"\n      }}>{`this`}</a>{` and make sure that you choose journaling API as the way to consume events by follow `}<a parentName=\"p\" {...{\n        \"href\": \"https://adobeio-codelabs-custom-events-adobedocs.project-helix.page/?src=/lessons/lesson4.html\"\n      }}>{`this`}</a></p>\n    <h2 {...{\n      \"id\": \"scheduling-cron-jobs-with-alarms\"\n    }}>{`Scheduling cron jobs with alarms`}</h2>\n    <p>{`Follow this codelab to automatically fire event by using runtime alarms package `}<a parentName=\"p\" {...{\n        \"href\": \"../cron-jobs/index.md\"\n      }}>{`Scheduling Cron Jobs with Alarms`}</a></p>\n    <p>{`Your `}<inlineCode parentName=\"p\">{`app.config.yaml`}</inlineCode>{` should look like this as below.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`application:\n  actions: actions\n  web: web-src\n  runtimeManifest:\n    packages:\n      my-app:\n        license: Apache-2.0\n        actions:\n          generic:\n            function: actions/generic/index.js\n            web: 'yes'\n            runtime: 'nodejs:14'\n            inputs:\n              LOG_LEVEL: debug\n            annotations:\n              require-adobe-auth: true\n              final: true\n          publish-events:\n            function: actions/publish-events/index.js\n            web: 'yes'\n            runtime: 'nodejs:14'\n            inputs:\n              LOG_LEVEL: debug\n              apiKey: $SERVICE_API_KEY\n              providerId: $PROVIDER_ID\n              eventCode: $EVENT_CODE\n              client_id: $CLIENT_ID\n              client_secret: $CLIENT_SECRET\n              technical_account_email: $TECH_ACCOUNT_EMAIL\n              technical_account_id: $TECH_ACCOUNT_ID\n              ims_org_id: $IMS_ORG_ID\n              private_key: $PRIVATE_KEY\n            annotations:\n              final: true\n        Triggers:\n          everyMin:\n            feed: /whisk.system/alarms/interval\n            inputs:\n              minutes: 1\n          rules:\n            everyMinRule:\n              trigger: everyMin\n              action: publish-events\n`}</code></pre>\n    <p>{`In order to test the action, you could execute `}<inlineCode parentName=\"p\">{`aio app deploy`}</inlineCode>{` in the VSCode terminal. Once the deployment is finished, run `}<inlineCode parentName=\"p\">{`aio rt action invoke your-app-name/generic`}</inlineCode>{`, and then verify its result and logs using `}<inlineCode parentName=\"p\">{`aio rt activation get ID`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`aio rt activation logs ID`}</inlineCode></p>\n    <p>{`If successful, the event provider should automatically send the events, you should be able to use postman or curl to verify the journaling API to receive events. `}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}