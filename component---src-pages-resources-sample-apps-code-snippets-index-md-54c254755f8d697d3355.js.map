{"version":3,"file":"component---src-pages-resources-sample-apps-code-snippets-index-md-54c254755f8d697d3355.js","mappings":"gTAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,MACE,GAAM,0BACJ,2BACJA,EAAAA,EAAAA,KAAA,SAAI,8KAA6KA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,YAAyB,uFACvJH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACzF,KAAQ,+EACN,QAAY,OAClBH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,uBACX,6+CAkDV,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://adobe-developer-app-builder/./src/pages/resources/sample_apps/code_snippets/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/app-builder/app-builder/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"caching-http-responses\"\n    }}>{`Caching HTTP responses`}</h1>\n    <p>{`Demonstrating how to cache response of an action at Gateway level. To test this functionality, make sure that the Cache-Control header in your HTTP request is not set to `}<inlineCode parentName=\"p\">{`no-cache`}</inlineCode>{`\n(which is by default if you use Postman or browser's developer tools). More info `}<a parentName=\"p\" {...{\n        \"href\": \"/app-builder/runtime/docs/guides/using/throughput_tuning/#caching-responses\"\n      }}>{`here`}</a>{`. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const { Core } = require('@adobe/aio-sdk')\nconst { errorResponse, stringParameters, checkMissingRequestInputs } = require('../utils')\n\n// main function that will be executed by Adobe I/O Runtime\nasync function main (params) {\n  // create a Logger\n  const logger = Core.Logger('main', { level: params.LOG_LEVEL || 'info' })\n\n  try {\n    // 'info' is the default level if not set\n    logger.info('Calling the main action')\n\n    // log parameters, only if params.LOG_LEVEL === 'debug'\n    logger.debug(stringParameters(params))\n\n    // check for missing request input parameters and headers\n    const requiredParams = ['name']\n    const requiredHeaders = []\n    const errorMessage = checkMissingRequestInputs(params, requiredParams, requiredHeaders)\n    if (errorMessage) {\n      // return and log client errors\n      return errorResponse(400, errorMessage, logger)\n    }\n\n    // sleeping 2 secs to simulate an outgoing server call\n    await new Promise(r => setTimeout(r, 2000))\n\n    const response = {\n      headers: {\n        'Cache-Control': 'max-age=300' // cached 5 min\n      },\n      statusCode: 200,\n      body: { message: \\`Hi \\${params.name}, I am ready!\\` }\n    }\n\n    // log the response status code\n    logger.info(\\`\\${response.statusCode}: successful request\\`)\n    return response\n  } catch (error) {\n    // log any server errors\n    logger.error(error)\n    // return with 500\n    return errorResponse(500, 'server error', logger)\n  }\n}\n\nexports.main = main\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}