{"version":3,"file":"component---src-pages-guides-credential-rotation-md-b1c3d191bced0f0bbcb0.js","mappings":"kTAMaA,EAAe,CAAC,EAKvBC,GAJgBC,EAIY,cAJJ,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5BI,EAAAA,EAAAA,KAAA,MAASH,EAClB,GAHsBD,MAKtB,MAAMK,EAAc,CAClBP,gBAEIQ,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIR,GAAKU,EAAAA,EAAAA,GAAAF,EAAAG,GAER,OAAOR,EAAAA,EAAAA,KAACE,GAASO,EAAAA,EAAAA,GAAA,GAAKR,EAAiBJ,EAAK,CAAES,WAAYA,EAAYI,QAAQ,eAG5EV,EAAAA,EAAAA,KAAA,MACE,GAAM,uBACJ,wBACJA,EAAAA,EAAAA,KAAA,SAAI,4NACJA,EAAAA,EAAAA,KAAA,MACE,GAAM,0BACJ,4BACJA,EAAAA,EAAAA,KAAA,SAAI,mMAAkMA,EAAAA,EAAAA,KAAA,MAAIW,WAAW,KAAK,sBAC1NX,EAAAA,EAAAA,KAAA,MACE,GAAM,6BACJ,8BACJA,EAAAA,EAAAA,KAAA,SAAI,qEAAoEA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,6BAA0C,cAC9IX,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,MAClB,UAAa,iBACX,ynBAaNX,EAAAA,EAAAA,KAACL,EAAW,CAACiB,MAAM,OAAOF,QAAQ,iBAClCV,EAAAA,EAAAA,KAAA,SAAI,6DAA4DA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,UAAuB,yDACnHX,EAAAA,EAAAA,KAAA,MACE,GAAM,kCACJ,qCACJA,EAAAA,EAAAA,KAAA,SAAI,8HAA6HA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,6BAA0C,SAAQX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,gCAC3OX,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,MAClB,UAAa,iBACX,iQAUNX,EAAAA,EAAAA,KAACL,EAAW,CAACiB,MAAM,OAAOF,QAAQ,iBAClCV,EAAAA,EAAAA,KAAA,SAAI,4EAA2EA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,UAAuB,wDAGtI,CAEAP,EAAWS,gBAAiB,C","sources":["webpack://adobe-developer-app-builder/./src/pages/guides/credential-rotation.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/app-builder/app-builder/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"credential-rotation\"\n    }}>{`Credential Rotation`}</h1>\n    <p>{`Eventually you will need to rotate your credentials to make sure everything remains secure.  This guide outlines best practices you can use to update the parameters ( aka inputs ) to your actions without disruption.`}</p>\n    <h2 {...{\n      \"id\": \"why-rotate-credentials\"\n    }}>{`Why rotate credentials?`}</h2>\n    <p>{`It is possible your credentials were leaked somehow, either by appearing in a errant log, or maybe a developer has left the team ... and it is just good practice to periodically rotate them. `}<em parentName=\"p\">{`because security`}</em></p>\n    <h2 {...{\n      \"id\": \"how-to-rotate-credentials\"\n    }}>{`How to rotate credentials`}</h2>\n    <p>{`In order to update the inputs for a particular action we use the `}<inlineCode parentName=\"p\">{`aio runtime action update`}</inlineCode>{` command.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`➜ aio runtime action update <action-name> --param <param-name> <param-value>\n# here's a concrete version\n➜ aio rt action update dx-excshell-1/generic -p=DEBUG silly\n\n# you can specify multiple values in several ways\n\n# firstly, just a list of key value pairs\n➜ aio runtime action update <action-name> --param <param-name> <param-value> <param-name> <param-value> <param-name> <param-value>\n\n# secondly, you can use the --param flag more than once .. here we use the shortened version -p\n➜ aio rt action update <action-name> -p <param-name> <param-value> -p <param-name> <param-value> -p <param-name> <param-value>\n\n`}</code></pre>\n    <InlineAlert slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Very important! You must pass ALL parameters in a single `}<inlineCode parentName=\"p\">{`update`}</inlineCode>{` call.  Any parameters not specified will disappear.`}</p>\n    <h2 {...{\n      \"id\": \"using-a-parameters-file--json-\"\n    }}>{`Using a parameters file ( JSON )`}</h2>\n    <p>{`You can also put your input values in a json file instead of typing them all into the command line.  This applies to both `}<inlineCode parentName=\"p\">{`aio runtime action update`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`aio runtime package update`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`# actionInputs.json\n{\n  \"actionCredential\": \"value from actionInputs.json\"\n}\n\n➜ aio runtime action update <action-name> --param-file=<value>\n# concrete example\n➜ aio runtime action update dx-excshell-1/generic --param-file=actionInputs.json\n\n`}</code></pre>\n    <InlineAlert slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Again! This is very important! You must pass ALL parameters in a single `}<inlineCode parentName=\"p\">{`update`}</inlineCode>{` call.  Any parameters NOT specified will disappear.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","slots","isMDXComponent"],"sourceRoot":""}