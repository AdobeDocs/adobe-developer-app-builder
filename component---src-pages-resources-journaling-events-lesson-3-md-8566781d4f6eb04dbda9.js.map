{"version":3,"file":"component---src-pages-resources-journaling-events-lesson-3-md-8566781d4f6eb04dbda9.js","mappings":"iTAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,MACE,GAAM,4BACJ,8BACJA,EAAAA,EAAAA,KAAA,SAAI,iEACJA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAM,yDACrBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAM,oGAEvBH,EAAAA,EAAAA,KAAA,SAAI,qIAAoIA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,mBAAgC,iBAAgBH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,iCAA8C,qMAAoMH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,iCAA8C,kDAAiDH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,iBAA8B,QAAOH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,iBAA8B,6BACxtBH,EAAAA,EAAAA,KAAA,SAAI,oCAAmCA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,YAAyB,aAAYH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,WAAwB,0HAAyHH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,mBAAgC,MAAKH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,aAA0B,SAAQH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,YAAyB,MACzcH,EAAAA,EAAAA,KAAA,SAAI,2MAGR,CAEAN,EAAWU,gBAAiB,C","sources":["webpack://adobe-developer-app-builder/./src/pages/resources/journaling-events/lesson3.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/app-builder/app-builder/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"lesson-3-end-to-end-test\"\n    }}>{`Lesson 3: End to end test`}</h1>\n    <p>{`In the previous lessons, we have setup two App Builder apps:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Event provider that automatically generating events `}</li>\n      <li parentName=\"ul\">{`Event consumer that automatically pulling from journaling api and write to App Builder storage`}</li>\n    </ul>\n    <p>{`If you would like to config the alarm package to automatically trigger events or pulling events from journaling API, let's setup `}<inlineCode parentName=\"p\">{`app.config.yaml`}</inlineCode>{` and try the `}<inlineCode parentName=\"p\">{`/whisk.system/alarms/interval`}</inlineCode>{` feed of the OpenWhisk Alarm Package to fire trigger events on an interval base schedule. To see the effect instantly, we will make it run every minute. You will need a trigger set up with the `}<inlineCode parentName=\"p\">{`/whisk.system/alarms/interval`}</inlineCode>{` feed, and a rule to wire this trigger to the `}<inlineCode parentName=\"p\">{`publish-event`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`consume-event`}</inlineCode>{` action created earlier.`}</p>\n    <p>{`The only required param for the `}<inlineCode parentName=\"p\">{`interval`}</inlineCode>{` feed is `}<inlineCode parentName=\"p\">{`minutes`}</inlineCode>{`, which is an integer representing the length of the interval (in minutes) between trigger fires. Optional params are `}<inlineCode parentName=\"p\">{`trigger_payload`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`startDate`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`stopDate`}</inlineCode>{`.`}</p>\n    <p>{`Now we deployed these two apps separately in different namespaces, we can configure these two apps at different paces to trigger. if succesful, the events will be stored in the App Builder database. `}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}